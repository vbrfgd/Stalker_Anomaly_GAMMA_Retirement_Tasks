local sfind = string.find

-----------------------------------------------------------
-- Check quest condition
-----------------------------------------------------------
task_status_functor.retirement_cond_check = function(tsk, task_id)
    local actor = db.actor
    local section = actor and load_var(actor, task_id .. "_fetch")
    if (not section) then
        return
    end

    if (actor:money() < load_var(actor, task_id .. "_money_fetch")) then
        tsk.stage = 0
        return
    end

    local item = section and actor:object(section)
    if (item ~= nil) then
        if (task_id == "esc_2_12_stalker_nimble_task_1" or task_id == "jup_b220_trapper_task_3") then
            if (item:condition() >= 0.9) then
                tsk.stage = 1
            else
                tsk.stage = 0
            end
        else
            local count = load_var(actor, task_id .. "_fetch_count")
            if (count and count > 1) then
                local cnt = utils_item.get_amount(db.actor, section, 1)
                if (cnt >= count) then
                    tsk.stage = 1
                else
                    tsk.stage = 0
                end
                return
            end
            tsk.stage = 1 -- should never happen but in such case let player finish quest for free
        end

    elseif section and sfind(section, "af_") then
        if actor:object(section .. "_af_aam") or actor:object(section .. "_af_iam") or
            actor:object(section .. "_af_aac") or actor:object(section .. "_lead_box") then
            tsk.stage = 1
        else
            tsk.stage = 0
        end
    else
        tsk.stage = 0
    end
end

-----------------------------------------------------------
-- Reward guns function
-----------------------------------------------------------
xr_effects.reward_gun = function(actor, npc)

    local npc = get_speaker()

    if (npc) then
        local npc_id = npc:id()
        local npc_name = npc:name()
        local npc_comm = character_community(npc)
        local npc_rank = ranks.get_obj_rank_name(npc)

        -- Spawn and degrade the weapons in npc inventory (Do not spawn armor)
        decide_items_to_keep(npc, npc_id, npc_name)
        try_spawn_ammo(npc)

        -- Transfer the items to player
        local function transfer_npc_item(item)
            npc:transfer_item(item, db.actor)
        end
        npc:inventory_for_each(transfer_npc_item)
    end

end

-----------------------------------------------------------
-- SHAMELESSLY STOLEN FROM CONFIGURABLE LOOT CONDITION
-----------------------------------------------------------

-------------------------------
-- PREPARE
-------------------------------
local enble_trade_items = true

local item_by_community = {}
local item_count = {}
local always_keep_item = {}
item_by_story_id = {}

local death_ini
local diff_multi, cnt_multi_1, cnt_multi_2 = 1, 1, 1
local shuffle_max = 2
local visuals = {}
local weapon_drop_condition, outfit_drop_condition = {}, {}
local o_cost_start, o_rank_multi, o_helm_multi

local item_prop_table = {
    cond_r = {30, 70},
    cond_ct = "part",
    cond_cr = {0.5, 0.75, 1}
}
local sfind = string.find
local keep_one = {}

function SetDiffModifications()
    local diff = game_difficulties.get_eco_factor("loots") or 1
    diff_multi = diff -- (diff - 0.2) or 0.8
    cnt_multi_1 = 1 -- diff or 1
    cnt_multi_2 = 1 -- diff or 1
end

function init_drop_settings()
    -- Create a list by community of the percent chance to spawn an item
    death_ini = itms_manager.ini_death
    SetDiffModifications()

    local community_list = {"stalker", "dolg", "freedom", "bandit", "army", "zombied", "ecolog", "killer", "monolith",
                            "csky", "renegade", "greh", "isg", "greh_npc", "army_npc"}
    local ranks = {"", "_novice", "_trainee", "_experienced", "_professional", "_veteran", "_expert", "_master",
                   "_legend"}
    local private = {"", "_private"}

    -- Collect community items
    for k1, v1 in pairs(community_list) do
        for k2, v2 in pairs(private) do
            for k3, v3 in pairs(ranks) do
                local x = v1 .. v2 .. v3
                item_by_community[x] = {}
                if death_ini:section_exist(x) then
                    local n = death_ini:line_count(x)
                    local id, value = "", ""
                    local cnt = 0
                    for i = 0, n - 1 do
                        result, id, value = death_ini:r_line_ex(x, i, "", "")
                        local temp = not (death_ini:line_exist("exclude_from_multi", id)) and diff_multi or 1
                        cnt = cnt + 1
                        item_by_community[x][cnt] = {}
                        item_by_community[x][cnt].sec = id
                        item_by_community[x][cnt].cha = value and tonumber(value) * temp or 0
                        -- printf("item by community difficulty multi %s : %s",temp,item_by_community[x][id])
                    end
                    shuffle_table(item_by_community[x])
                end
            end
        end
    end

    -- Collect items count
    local n = death_ini:line_count("item_count")
    local id, value = "", ""
    for i = 0, n - 1 do
        local result, id, value = death_ini:r_line_ex("item_count", i, "", "")
        local p = str_explode(value, ",")
        if (p) then
            p[1] = tonumber(p[1]) or 0
            p[2] = tonumber(p[2]) or p[1]
            item_count[id] = {math.ceil(p[1] * cnt_multi_1), math.ceil(p[2] * cnt_multi_2)}
            -- printf("item count  min%s:max%s  item_count[id] min%s:max%s",cnt_multi_1,cnt_multi_2,item_count[id][1],item_count[id][2])
        end
    end

    -- Create a list of item sections that npc must keep
    local n = death_ini:line_count("keep_items")
    for i = 0, n - 1 do
        local result, id, value = death_ini:r_line_ex("keep_items", i, "", "")
        if value == "true" then
            always_keep_item[id] = true
        end
    end

    -- Create a list of item sections that npc must keep
    local n = death_ini:line_count("spawn_by_story_id")
    for i = 0, n - 1 do
        if not (item_by_story_id) then
            item_by_story_id = {}
        end
        local result, id, value = death_ini:r_line_ex("spawn_by_story_id", i, "", "")
        item_by_story_id[id] = value
    end

    -- Create a list of weapon drop condition based on rank
    local n = death_ini:line_count("weapon_drop_condition")
    for i = 0, n - 1 do
        local result, id, value = death_ini:r_line_ex("weapon_drop_condition", i, "", "")
        local p = str_explode(value, ",")
        if (p) then
            p[1] = tonumber(p[1]) or 0.1
            p[2] = tonumber(p[2]) or p[1]
            weapon_drop_condition[id] = {math.ceil(p[1] * 100), math.ceil(p[2] * 100)}
        end
    end
    if (not weapon_drop_condition["novice"]) then
        weapon_drop_condition["novice"] = {5, 20}
    end

    -- Create a list of outfit drop condition based on rank
    local n = death_ini:line_count("outfit_drop_condition")
    for i = 0, n - 1 do
        local result, id, value = death_ini:r_line_ex("outfit_drop_condition", i, "", "")
        local p = str_explode(value, ",")
        if (p) then
            p[1] = tonumber(p[1]) or 0.1
            p[2] = tonumber(p[2]) or p[1]
            outfit_drop_condition[id] = {math.ceil(p[1] * 100), math.ceil(p[2] * 100)}
        end
    end

    -- Create a list of items to keep one copy of in corpses
    local n = death_ini:line_count("keep_one")
    for i = 0, n - 1 do
        local result, id, value = death_ini:r_line_ex("keep_one", i, "", "")
        keep_one[id] = 0
    end

    -- Progressive outfit drop settings
    o_cost_start = death_ini:r_float_ex("outfit_drop_settings", "cost_start") or 25000
    o_rank_multi = death_ini:r_float_ex("outfit_drop_settings", "rank_multiplier") or 20
    o_helm_multi = death_ini:r_float_ex("outfit_drop_settings", "helmet_cost_multi") or 3
end

-----------------------------------------
-- ITEMS TO KEEP
-----------------------------------------
function decide_items_to_keep(npc, npc_id, npc_name) -- this will actually occur every time corpse spawn unless already looted
    local death_dropped = se_load_var(npc_id, npc_name, "death_dropped")
    if (death_dropped) then
        return
    end
    -- reset
    for sec, num in pairs(keep_one) do
        keep_one[sec] = 0
    end

    npc:iterate_inventory(keep_item, npc)
end

function keep_item(npc, item) -- The function is called for each item, and decide if this item should stay or get released.
    if not (item) then
        return
    end

    -- Keep whitelisted items from death manager
    local section = item:section()
    local item_id = item:id()

    if (always_keep_item[section]) then
        return
    end

    local se_item = alife_object(item_id)
    if not (se_item) then
        return
    end

    -- NPC has a define "dont_keep_items" in his spawn ini
    local ini = npc:spawn_ini()
    if ini and ini:section_exist("dont_keep_items") then
        alife_release(se_item)
        return
    end

    local npc_id = npc:id()
    local st = db.storage[npc_id]
    if (st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic, "dont_keep_items")) then
        alife_release(se_item)
        return
    end

    -- keep items the actor gave to NPC then dont release/alter condition
    if axr_companions.is_assigned_item(npc_id, item_id) then
        return
    end

    -- Release animations items, and return
    if IsItem("anim", section) then
        alife_release(se_item)
        return
    end

    --[[
	local m = math.ceil(item:get_max_uses() * math.random(diff_multi,1))
	if (m > 0) then 
		local r = math.random(0,m)
		item:set_remaining_uses(r)
		if (r == 0) then 
			alife_release(se_item)
		end
		return
	end
	--]]

    --[[ Keep artefacts
	if IsArtefact(item) then
		return
	end
	--]]

    -- Adjust weapons condition, and spawn suitable ammo
    local cls = item:clsid()
    if IsWeapon(item, cls) and (not (cls == clsid.wpn_grenade_rgd5_s or cls == clsid.wpn_grenade_f1_s)) and
        (not se_load_var(item_id, npc:name(), "strapped_item")) -- don't modify weapons strapped from player
    then
        -- printf("set_weapon_drop_condition - %s", npc_id)
        set_weapon_drop_condition(npc, item)
        return
    end

    -- Adjust outfits condition
    if IsOutfit(nil, cls) or IsHeadgear(nil, cls) then
        local npc_comm = character_community(npc)
        local npc_rank = ranks.get_obj_rank_name(npc)
        local coef = get_comb_coeff(npc_rank, npc_comm) ^ 0.44
        local condition = get_condition_by_rank(npc_rank, coef)
        itms_manager.process_item(section, item_id, {
            cond = condition
        })
        return
    end

    -- Release ammo (alot of them are in npc possission)
    if (item:is_ammo()) and (item:ammo_get_count() > 5) then
        alife_release(se_item)
        return
    end

    -- Release grenades (alot of them are in npc possission)
    if IsItem("grenade_ammo", section) then
        alife_release(se_item)
        return
    end

    -- Release items that corpse can have only one copy of
    if keep_one[section] then
        keep_one[section] = keep_one[section] + 1
        if keep_one[section] > 1 then
            alife_release(se_item)
            return
        end
    end

    --[[
	local temp = not (death_ini:line_exist("exclude_from_multi",section)) and diff_multi or 1
	if (item:is_ammo() ~= true and xr_corpse_detection.lootable_table and xr_corpse_detection.lootable_table[section] and math.random(1,100) < 65 * temp) then
		return
	end
	
	-- Keep items initiated in trading before
	if items_by_npc[npc_id] and items_by_npc[npc_id][item_id] then
		return
	end
	--]]

    -- if (item:is_ammo() ~= true) and (ini_sys:r_bool_ex(section,"can_trade")) then
    -- return
    -- end

    -- alife_release(se_item)
end

-------------------------------
-- WEAPONS
-------------------------------
function try_spawn_ammo(npc)
    local ammo_class, sec, number
    local function itr(npc, itm)
        if (IsWeapon(nil, itm:clsid()) and not npc:marked_dropped(itm)) then
            ammo_class = parse_list(ini_sys, itm:section(), "ammo_class")

            -- randomly spawn only 1 ammo type per found weapon
            if (#ammo_class > 0) then
                sec = ammo_class[math.random(1, #ammo_class)]
                if (sec) then
                    if (item_count[sec]) then
                        number = math.random(item_count[sec][1], item_count[sec][2])
                    else
                        number = 0
                    end
                    if (number > 0 and ini_sys:section_exist(sec)) then
                        alife_create_item(sec, npc, {
                            ammo = number
                        })
                    end
                end
            end

            -- spawn grenade ammo if there is launcher attached
            if (ini_sys:r_float_ex(itm:section(), "grenade_launcher_status") > 0) then
                ammo_class = parse_list(ini_sys, itm:section(), "grenade_class")
                for i = 1, #ammo_class do
                    sec = ammo_class[i]
                    if (sec) then
                        if (item_count[sec]) then
                            number = math.random(item_count[sec][1], item_count[sec][2])
                        else
                            number = math.random(0, 2)
                        end
                        if (number > 0 and ini_sys:section_exist(sec)) then
                            -- DPH_LOOT_COND
                            alife_create_item(sec, npc, {
                                ammo = number
                            })
                            -- DPH_LOOT_COND
                        end
                    end
                end
            end
        end
    end
    npc:iterate_inventory(itr, npc)

    CreateTimeEvent(npc:id(), "npc_ammo_aggregation", 0, item_weapon.ammo_aggregation_full, npc:id())
end

function set_weapon_drop_condition(npc, itm)

    local rank = ranks.get_obj_rank_name(npc)
    local condition = 10

    -- DPH_LOOT_COND
    local ckey = rank

    if npc:character_community() == "zombied" then
        ckey = 'zombied'
    end

    -- HARD CODED CONDITION RANGE

    -- local rank_list = {"novice", "trainee", "professional", "veteran", "expert", "master", "legend"}

    -- local min_cond_list = {10, -- novice
    -- 10, -- trainee
    -- 15, -- experienced
    -- 15, -- professional
    -- 20, -- veteran
    -- 20, -- expert
    -- 25, -- master
    -- 25 -- legend
    -- }

    -- local max_cond_list = {20, -- novice
    -- 25, -- trainee
    -- 25, -- experienced
    -- 30, -- professional
    -- 30, -- veteran
    -- 35, -- expert
    -- 35, -- master
    -- 40 -- legend
    -- }

    -- -- Gun condition
    -- local min_cond = 10
    -- local max_cond = 25

    -- for i = 0, 7 do
    --     if rank_list[i] == ckey then
    --         min_cond = min_cond_list[i]
    --         max_cond = max_cond_list[i]
    --     end
    -- end

    -- GETTING VALUES FROM "Configureable Loot Condition"

    local opt_default = {
        ['zombied_min'] = 5,
        ['zombied_max'] = 10,
        ["novice_min"] = 10,
        ["novice_max"] = 20,
        ["trainee_min"] = 10,
        ["trainee_max"] = 25,
        ["experienced_min"] = 15,
        ["experienced_max"] = 25,
        ["professional_min"] = 15,
        ["professional_max"] = 30,
        ["veteran_min"] = 20,
        ["veteran_max"] = 30,
        ["expert_min"] = 20,
        ["expert_max"] = 35,
        ["master_min"] = 25,
        ["master_max"] = 35,
        ["legend_min"] = 25,
        ["legend_max"] = 40
    }

    function setting_get(section, ckey, limit)
        if ui_mcm then
            return ui_mcm.get('dph_loot_cond/' .. section .. '/' .. ckey .. '_' .. limit)
        else
            return opt_default[ckey .. '_' .. limit]
        end
    end

    local min_cond = setting_get('weapon', ckey, 'min')
    local max_cond = setting_get('weapon', ckey, 'max')

    -- Uncomment the 2 following lines for 100% condition rewards.
    -- local min_cond = 100
    -- local max_cond = 100

    condition = math.random(min_cond, max_cond)
    -- DPH_LOOT_COND END

    condition = clamp(condition, 5, 100)
    condition = condition / 100

    itm:set_condition(condition)

    -- avoid creating ammo on reload
    local death_dropped = se_load_var(npc:id(), npc:name(), "death_dropped")
    if (death_dropped) then
        return
    end

    if (IsWeapon(nil, itm:clsid()) and not npc:marked_dropped(itm)) then
        --
        local sec, number
        local ammo_class = parse_list(ini_sys, itm:section(), "ammo_class")

        -- randomly spawn only 1 ammo type per found weapon
        if (#ammo_class > 0) then
            sec = ammo_class[math.random(1, #ammo_class)]
            if (sec and item_count[sec]) then
                number = math.random(item_count[sec][1], item_count[sec][2])
                if (number > 0 and ini_sys:section_exist(sec)) then
                    -- DPH_LOOT_COND

                    alife_create_item(sec, npc, {
                        ammo = number
                    })
                    -- DPH_LOOT_COND
                end
            end
        end
        -- spawn grenade ammo if there is launcher attached
        if (ini_sys:r_float_ex(itm:section(), "grenade_launcher_status") > 0) then
            ammo_class = parse_list(ini_sys, itm:section(), "grenade_class")
            for i = 1, #ammo_class do
                sec = ammo_class[i]
                if (sec and item_count[sec]) then
                    number = math.random(item_count[sec][1], item_count[sec][2])
                    if (number > 0 and ini_sys:section_exist(sec)) then
                        alife_create_item(sec, npc, {
                            ammo = number
                        })
                    end
                end
            end
        end
        --

        local ammo = itm:get_ammo_in_magazine()

        -- printf("--Weapon: "..itm:section())

        -- printf("--Ammo before edit: "..itm:get_ammo_in_magazine())

        if (ammo > 10) then

            local chance = math.random(0, 100)
            if chance > 15 then
                itm:set_ammo_elapsed(math.random(5, 10))
            end
        end

        -- printf("--Ammo after edit: "..itm:get_ammo_in_magazine())

    end
end
